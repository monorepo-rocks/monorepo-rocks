{
	"explorer.fileNesting.enabled": true,
	"explorer.fileNesting.patterns": {
		"*.ts": "$(capture).js, $(capture).d.ts",
		"*.js": "$(capture).js.map, $(capture).min.js, $(capture).d.ts",
		"*.jsx": "$(capture).js",
		"*.tsx": "$(capture).ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": ".*, Dockerfile, Justfile, turbo.json, *.config.ts, LICENSE, AGENTS.md, CHANGELOG.md, CLAUDE.md, PRD.md, README.md, TODO.md, bun.lock, postcss.config.js, remix.config.js, tailwind.config.js, package-lock.json, railway.json, tsconfig.json, dagger.json, turbo.jsonc, wrangler.jsonc, postcss.config.mjs, astro.config.mjs, postcss.config.mjs, astro.config.ts, drizzle.config.ts, env.d.ts, eslint.config.ts, postcss.config.ts, remix.env.d.ts, server.ts, tailwind.config.ts, vite.config.ts, vitest.config.ts, vitest.config.*.ts, vitest.workspace.ts, worker-configuration.d.ts, astroblog.code-workspace, ndstories.code-workspace, uuid-rocks.code-workspace, workflows.code-workspace, workers.code-workspace, yarn.lock, pnpm-lock.yaml, pnpm-workspace.yaml"
	},
	"editor.detectIndentation": true,

	"gitlens.ai.generateCommitMessage.customInstructions": "<commit-message-format>\n\n<title>Commit Message Guidelines</title>\n\n<rules>\n- Use format: `<feat|chore|fix>: <summary>`\n- If most changes are in `play/` directory or subdirectory, use format: `<feat|chore|fix>(play): <summary>`\n- Keep summary under 72 characters when possible\n- Use lowercase for type and first letter of summary\n- Use imperative mood - write as if giving a command\n- Use active voice and avoid unnecessary details in title\n- **DEFAULT: Write title-only commits with NO BODY**\n- **Only add body for: breaking changes, warnings, or complex multi-step changes**\n- **Simple bug fixes and features should NEVER have a body**\n- **CRITICAL: Every line in the commit body MUST be 72 characters or less - wrap longer lines**\n- Focus on what was added, removed, or changed rather than technical implementation\n- Use `add`, `fix`, `update`, `remove` (NOT `adds`, `fixes`, `updates`, `removes`)\n- Always include specific context about which system, file, or location was modified\n- Be specific rather than generic\n- Examine actual code changes to accurately describe what was modified\n- Look at specific property names, file paths, and values being changed\n</rules>\n\n<body-policy>\n**STOP! Before adding a body, ask yourself:**\n1. Can someone understand this change from the title alone? → NO BODY\n2. Is this a simple bug fix? → NO BODY\n3. Is this adding/removing/updating a single feature? → NO BODY\n4. Are you just restating the title in different words? → NO BODY\n\n**Only add a body if:**\n- There's a breaking change users must know about\n- There's a non-obvious reason WHY this change was made\n- Multiple unrelated changes are bundled (though this should be avoided)\n\n**If you must add a body, keep it to 1-2 lines maximum.**\n</body-policy>\n\n<examples>\n<correct>\nfix(play): prevent duplicate items when inserting dataset\n</correct>\n\n<incorrect-verbose>\nfix(play): prevent duplicate items when inserting dataset\n\nModify dataset insertion to filter out existing items before adding.\nEnsures no duplicate entries are added by checking against\nexisting dataset items based on their input value.\n</incorrect-verbose>\n\n<correct-with-body-when-needed>\nfeat: replace JWT auth with sessions\n\nBREAKING: API clients must now include cookies. See migration guide.\n</correct-with-body-when-needed>\n\n<rule-of-thumb>\n90% of commits should be title-only.\nIf you're adding a body, you're probably being too verbose.\n</rule-of-thumb>\n</examples>\n\n</commit-message-format>\n",

	// https://arktype.io/docs/intro/setup#settings
	// allow autocomplete for ArkType expressions like "string | num"
	"editor.quickSuggestions": {
		"strings": "on"
	},
	// prioritize ArkType's "type" for autoimports
	"typescript.preferences.autoImportSpecifierExcludeRegexes": ["^(node:)?os$"],
	"typescript.preferences.autoImportFileExcludePatterns": ["**/vitest/dist/**"],
	"typescript.preferences.importModuleSpecifier": "non-relative",

	// I always prefer format on save
	"editor.formatOnSave": true,

	"github-actions.workflows.pinned.workflows": [
		".github/workflows/release.yml",
		".github/workflows/branches.yml"
	],
	"github-actions.workflows.pinned.refresh.enabled": true,
	"github-actions.workflows.pinned.refresh.interval": 30,

	"eslint.options": {
		"flags": ["v10_config_lookup_from_file"]
	},

	"files.associations": {
		"**/packages/tools/bin/*": "shellscript",
		"**/*.css": "tailwindcss",
		"turbo.json": "jsonc",
		"**/packages/typescript-config/*.json": "jsonc"
	},
	"eslint.workingDirectories": [
		{
			"mode": "auto"
		}
	],
	"cSpell.words": [
		"cloudflareaccess",
		"codemod",
		"Hono",
		"itty",
		"jachands",
		"luxon",
		"miniflare",
		"opentelemetry",
		"otel",
		"pnpx",
		"runx",
		"syncpack",
		"typecheck",
		"addrs",
		"devlist",
		"gitea",
		"logtail",
		"miniflare",
		"tldraw"
	],
	"augment.advanced": {
		"mcpServers": [
			{
				"name": "rules",
				"command": "${workspaceFolder}/.vscode/bin/bun",
				"args": ["x", "llm-rules@latest", "--dir", "${workspaceFolder}"]
			},
			{
				"name": "cloudflare-docs",
				"command": "${workspaceFolder}/.vscode/bin/bun",
				"args": ["x", "mcp-remote@latest", "https://docs.mcp.cloudflare.com/sse"]
			}
		]
	},
	"amp.mcpServers": {
		"rules": {
			"command": "bun",
			"args": ["x", "llm-rules@latest"]
		}
	}
}
