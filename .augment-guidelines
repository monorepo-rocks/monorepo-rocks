# Augment Guidelines

## Code Formatting

### Indentation

- **ALWAYS use TABS instead of SPACES** for indentation in TypeScript files (.ts, .tsx)
- This is critical for compatibility with the project's auto-formatter (Prettier)
- The project's `.prettierrc.cjs` is configured with `useTabs: true`
- Auto-formatter will convert spaces to tabs, which can cause formatting conflicts

### File Types Affected

- `*.ts` - TypeScript files
- `*.tsx` - TypeScript React files
- All other TypeScript-related files

### Why This Matters

- The project uses Prettier with `useTabs: true` configuration
- Code edits using spaces will be automatically converted to tabs by the formatter
- This ensures consistency across the codebase and prevents formatting conflicts
- Maintains compatibility with the existing codebase standards

### Reminder

When making any code changes to TypeScript files, ensure all indentation uses tabs, not spaces.

## Markdown Formatting

### Headings

- **ALWAYS add a newline after headings** in markdown files (.md)
- This ensures proper spacing and readability in markdown documents
- Apply this rule to all heading levels (H1 through H6)

### Indentation

- **ALWAYS use SPACES instead of TABS** for indentation in markdown files (.md)
- This includes code snippets within markdown files
- Use 2 or 4 spaces for consistent indentation depending on context
- Markdown parsers and renderers work more reliably with spaces

### File Types Affected

- `*.md` - Markdown files

### Numbered Lists

- **Numbered list items ALWAYS have a blank line after the number/title**
- Sub-items under numbered lists are indented with 3 spaces (not 2 or 4)
- This is enforced by the auto-formatter and causes str-replace failures if not matched exactly

### JSON in Code Blocks

- **JSON code blocks may have trailing commas** added by the auto-formatter
- **Indentation in JSON blocks uses 2 spaces** consistently
- Always check for trailing commas when editing JSON examples in markdown

### Auto-Formatter Patterns

The auto-formatter makes these specific changes that cause str-replace mismatches:

1. **Adds blank lines after numbered list headers**:

   ```markdown
   1. **Item Title**

      - Sub-item (note the blank line above)
   ```

2. **Standardizes JSON formatting**:

   ```jsonc
   {
   	"key": "value", // May add trailing comma
   }
   ```

3. **Consistent spacing in lists**:
   - Uses exactly 3 spaces for sub-items under numbered lists
   - Uses 2 spaces for regular bullet point sub-items

### Example

```markdown
# Main Heading

Content starts here with proper spacing.

## Section Heading

More content with proper spacing after the heading.

1. **Numbered Item**

   - Sub-item with 3 spaces indentation
   - Another sub-item

2. **Second Item**

   - More sub-items
```
